/*
 * Payment Initiation API
 * Swagger for Payment Initiation API Specification
 *
 * OpenAPI spec version: 3.1.10
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.transferwise.openbanking.client.api.payment.v3.model.payment;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.Serializable;
/**
 * Supporting Data provided by TPP, when requesting SCA Exemption.
 */


public class OBSCASupportData1 implements Serializable{
  private static final long serialVersionUID = 1L;
  /**
   * This field allows a PISP to request specific SCA Exemption for a Payment Initiation
   */
  public enum RequestedSCAExemptionTypeEnum {
    BILLPAYMENT("BillPayment"),
    CONTACTLESSTRAVEL("ContactlessTravel"),
    ECOMMERCEGOODS("EcommerceGoods"),
    ECOMMERCESERVICES("EcommerceServices"),
    KIOSK("Kiosk"),
    PARKING("Parking"),
    PARTYTOPARTY("PartyToParty");

    private String value;

    RequestedSCAExemptionTypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static RequestedSCAExemptionTypeEnum fromValue(String input) {
      for (RequestedSCAExemptionTypeEnum b : RequestedSCAExemptionTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("RequestedSCAExemptionType")
  private RequestedSCAExemptionTypeEnum requestedSCAExemptionType = null;

  /**
   * Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
   */
  public enum AppliedAuthenticationApproachEnum {
    CA("CA"),
    SCA("SCA");

    private String value;

    AppliedAuthenticationApproachEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AppliedAuthenticationApproachEnum fromValue(String input) {
      for (AppliedAuthenticationApproachEnum b : AppliedAuthenticationApproachEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("AppliedAuthenticationApproach")
  private AppliedAuthenticationApproachEnum appliedAuthenticationApproach = null;

  @JsonProperty("ReferencePaymentOrderId")
  private String referencePaymentOrderId = null;

  public OBSCASupportData1 requestedSCAExemptionType(RequestedSCAExemptionTypeEnum requestedSCAExemptionType) {
    this.requestedSCAExemptionType = requestedSCAExemptionType;
    return this;
  }

   /**
   * This field allows a PISP to request specific SCA Exemption for a Payment Initiation
   * @return requestedSCAExemptionType
  **/
  
  public RequestedSCAExemptionTypeEnum getRequestedSCAExemptionType() {
    return requestedSCAExemptionType;
  }

  public void setRequestedSCAExemptionType(RequestedSCAExemptionTypeEnum requestedSCAExemptionType) {
    this.requestedSCAExemptionType = requestedSCAExemptionType;
  }

  public OBSCASupportData1 appliedAuthenticationApproach(AppliedAuthenticationApproachEnum appliedAuthenticationApproach) {
    this.appliedAuthenticationApproach = appliedAuthenticationApproach;
    return this;
  }

   /**
   * Specifies a character string with a maximum length of 40 characters. Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
   * @return appliedAuthenticationApproach
  **/
  
  public AppliedAuthenticationApproachEnum getAppliedAuthenticationApproach() {
    return appliedAuthenticationApproach;
  }

  public void setAppliedAuthenticationApproach(AppliedAuthenticationApproachEnum appliedAuthenticationApproach) {
    this.appliedAuthenticationApproach = appliedAuthenticationApproach;
  }

  public OBSCASupportData1 referencePaymentOrderId(String referencePaymentOrderId) {
    this.referencePaymentOrderId = referencePaymentOrderId;
    return this;
  }

   /**
   * If the payment is recurring, then this field is populated with the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence. The value here refers to the payment id e.g. DomesticPaymentId  
   * @return referencePaymentOrderId
  **/
  
  public String getReferencePaymentOrderId() {
    return referencePaymentOrderId;
  }

  public void setReferencePaymentOrderId(String referencePaymentOrderId) {
    this.referencePaymentOrderId = referencePaymentOrderId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBSCASupportData1 obSCASupportData1 = (OBSCASupportData1) o;
    return Objects.equals(this.requestedSCAExemptionType, obSCASupportData1.requestedSCAExemptionType) &&
        Objects.equals(this.appliedAuthenticationApproach, obSCASupportData1.appliedAuthenticationApproach) &&
        Objects.equals(this.referencePaymentOrderId, obSCASupportData1.referencePaymentOrderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestedSCAExemptionType, appliedAuthenticationApproach, referencePaymentOrderId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBSCASupportData1 {\n");
    
    sb.append("    requestedSCAExemptionType: ").append(toIndentedString(requestedSCAExemptionType)).append("\n");
    sb.append("    appliedAuthenticationApproach: ").append(toIndentedString(appliedAuthenticationApproach)).append("\n");
    sb.append("    referencePaymentOrderId: ").append(toIndentedString(referencePaymentOrderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
