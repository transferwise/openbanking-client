/*
 * OBIE VRP Profile
 * VRP OpenAPI Specification
 *
 * OpenAPI spec version: 3.1.10
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferwise.openbanking.client.api.payment.v3.model.vrp;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.Serializable;

/**
 * OBDomesticVRPControlParametersPeriodicLimits
 */

public class OBDomesticVRPControlParametersPeriodicLimits implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * ^ Period type for this period limit
   */
  public enum PeriodTypeEnum {
    DAY("Day"),
    
    WEEK("Week"),
    
    FORTNIGHT("Fortnight"),
    
    MONTH("Month"),
    
    HALF_YEAR("Half-year"),
    
    YEAR("Year");

    private String value;

    PeriodTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PeriodTypeEnum fromValue(String text) {
      for (PeriodTypeEnum b : PeriodTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }
  }

  @JsonProperty("PeriodType")
  private PeriodTypeEnum periodType;

  /**
   * ^ Specifies whether the period starts on the date of consent creation or lines up with a calendar
   */
  public enum PeriodAlignmentEnum {
    CONSENT("Consent"),
    
    CALENDAR("Calendar");

    private String value;

    PeriodAlignmentEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PeriodAlignmentEnum fromValue(String text) {
      for (PeriodAlignmentEnum b : PeriodAlignmentEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }
  }

  @JsonProperty("PeriodAlignment")
  private PeriodAlignmentEnum periodAlignment;

  @JsonProperty("Amount")
  private String amount;

  @JsonProperty("Currency")
  private String currency;

  public OBDomesticVRPControlParametersPeriodicLimits periodType(PeriodTypeEnum periodType) {
    this.periodType = periodType;
    return this;
  }

   /**
   * ^ Period type for this period limit
   * @return periodType
  **/
  
  public PeriodTypeEnum getPeriodType() {
    return periodType;
  }

  public void setPeriodType(PeriodTypeEnum periodType) {
    this.periodType = periodType;
  }

  public OBDomesticVRPControlParametersPeriodicLimits periodAlignment(PeriodAlignmentEnum periodAlignment) {
    this.periodAlignment = periodAlignment;
    return this;
  }

   /**
   * ^ Specifies whether the period starts on the date of consent creation or lines up with a calendar
   * @return periodAlignment
  **/
  
  public PeriodAlignmentEnum getPeriodAlignment() {
    return periodAlignment;
  }

  public void setPeriodAlignment(PeriodAlignmentEnum periodAlignment) {
    this.periodAlignment = periodAlignment;
  }

  public OBDomesticVRPControlParametersPeriodicLimits amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
   * @return amount
  **/
  
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public OBDomesticVRPControlParametersPeriodicLimits currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \&quot;Codes for the representation of currencies and funds\&quot;.
   * @return currency
  **/
  
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBDomesticVRPControlParametersPeriodicLimits obDomesticVRPControlParametersPeriodicLimits = (OBDomesticVRPControlParametersPeriodicLimits) o;
    return Objects.equals(this.periodType, obDomesticVRPControlParametersPeriodicLimits.periodType) &&
        Objects.equals(this.periodAlignment, obDomesticVRPControlParametersPeriodicLimits.periodAlignment) &&
        Objects.equals(this.amount, obDomesticVRPControlParametersPeriodicLimits.amount) &&
        Objects.equals(this.currency, obDomesticVRPControlParametersPeriodicLimits.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(periodType, periodAlignment, amount, currency);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBDomesticVRPControlParametersPeriodicLimits {\n");
    
    sb.append("    periodType: ").append(toIndentedString(periodType)).append("\n");
    sb.append("    periodAlignment: ").append(toIndentedString(periodAlignment)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

