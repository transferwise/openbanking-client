/*
 * OBIE VRP Profile
 * VRP OpenAPI Specification
 *
 * OpenAPI spec version: 3.1.9
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.transferwise.openbanking.client.api.payment.v3.model.vrp;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.io.Serializable;

/**
 * OBDomesticVRPInstruction
 */

public class OBDomesticVRPInstruction implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("InstructionIdentification")
  private String instructionIdentification;

  @JsonProperty("EndToEndIdentification")
  private String endToEndIdentification;

  @JsonProperty("RemittanceInformation")
  private OBVRPRemittanceInformation remittanceInformation = null;

  @JsonProperty("LocalInstrument")
  private OBExternalLocalInstrument1Code localInstrument = null;

  @JsonProperty("InstructedAmount")
  private OBActiveOrHistoricCurrencyAndAmount instructedAmount = null;

  @JsonProperty("CreditorPostalAddress")
  private OBPostalAddress6 creditorPostalAddress = null;

  @JsonProperty("CreditorAccount")
  private OBCashAccountCreditor3 creditorAccount = null;

  @JsonProperty("SupplementaryData")
  private Object supplementaryData = null;

  public OBDomesticVRPInstruction instructionIdentification(String instructionIdentification) {
    this.instructionIdentification = instructionIdentification;
    return this;
  }

   /**
   * Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
   * @return instructionIdentification
  **/
  
  public String getInstructionIdentification() {
    return instructionIdentification;
  }

  public void setInstructionIdentification(String instructionIdentification) {
    this.instructionIdentification = instructionIdentification;
  }

  public OBDomesticVRPInstruction endToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
    return this;
  }

   /**
   * Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field
   * @return endToEndIdentification
  **/
  
  public String getEndToEndIdentification() {
    return endToEndIdentification;
  }

  public void setEndToEndIdentification(String endToEndIdentification) {
    this.endToEndIdentification = endToEndIdentification;
  }

  public OBDomesticVRPInstruction remittanceInformation(OBVRPRemittanceInformation remittanceInformation) {
    this.remittanceInformation = remittanceInformation;
    return this;
  }

   /**
   * Get remittanceInformation
   * @return remittanceInformation
  **/
  
  public OBVRPRemittanceInformation getRemittanceInformation() {
    return remittanceInformation;
  }

  public void setRemittanceInformation(OBVRPRemittanceInformation remittanceInformation) {
    this.remittanceInformation = remittanceInformation;
  }

  public OBDomesticVRPInstruction localInstrument(OBExternalLocalInstrument1Code localInstrument) {
    this.localInstrument = localInstrument;
    return this;
  }

   /**
   * Get localInstrument
   * @return localInstrument
  **/
  
  public OBExternalLocalInstrument1Code getLocalInstrument() {
    return localInstrument;
  }

  public void setLocalInstrument(OBExternalLocalInstrument1Code localInstrument) {
    this.localInstrument = localInstrument;
  }

  public OBDomesticVRPInstruction instructedAmount(OBActiveOrHistoricCurrencyAndAmount instructedAmount) {
    this.instructedAmount = instructedAmount;
    return this;
  }

   /**
   * Get instructedAmount
   * @return instructedAmount
  **/
  
  public OBActiveOrHistoricCurrencyAndAmount getInstructedAmount() {
    return instructedAmount;
  }

  public void setInstructedAmount(OBActiveOrHistoricCurrencyAndAmount instructedAmount) {
    this.instructedAmount = instructedAmount;
  }

  public OBDomesticVRPInstruction creditorPostalAddress(OBPostalAddress6 creditorPostalAddress) {
    this.creditorPostalAddress = creditorPostalAddress;
    return this;
  }

   /**
   * Get creditorPostalAddress
   * @return creditorPostalAddress
  **/
  
  public OBPostalAddress6 getCreditorPostalAddress() {
    return creditorPostalAddress;
  }

  public void setCreditorPostalAddress(OBPostalAddress6 creditorPostalAddress) {
    this.creditorPostalAddress = creditorPostalAddress;
  }

  public OBDomesticVRPInstruction creditorAccount(OBCashAccountCreditor3 creditorAccount) {
    this.creditorAccount = creditorAccount;
    return this;
  }

   /**
   * Get creditorAccount
   * @return creditorAccount
  **/
  
  public OBCashAccountCreditor3 getCreditorAccount() {
    return creditorAccount;
  }

  public void setCreditorAccount(OBCashAccountCreditor3 creditorAccount) {
    this.creditorAccount = creditorAccount;
  }

  public OBDomesticVRPInstruction supplementaryData(Object supplementaryData) {
    this.supplementaryData = supplementaryData;
    return this;
  }

   /**
   * Additional information that can not be captured in the structured fields and/or any other specific block. 
   * @return supplementaryData
  **/
  
  public Object getSupplementaryData() {
    return supplementaryData;
  }

  public void setSupplementaryData(Object supplementaryData) {
    this.supplementaryData = supplementaryData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBDomesticVRPInstruction obDomesticVRPInstruction = (OBDomesticVRPInstruction) o;
    return Objects.equals(this.instructionIdentification, obDomesticVRPInstruction.instructionIdentification) &&
        Objects.equals(this.endToEndIdentification, obDomesticVRPInstruction.endToEndIdentification) &&
        Objects.equals(this.remittanceInformation, obDomesticVRPInstruction.remittanceInformation) &&
        Objects.equals(this.localInstrument, obDomesticVRPInstruction.localInstrument) &&
        Objects.equals(this.instructedAmount, obDomesticVRPInstruction.instructedAmount) &&
        Objects.equals(this.creditorPostalAddress, obDomesticVRPInstruction.creditorPostalAddress) &&
        Objects.equals(this.creditorAccount, obDomesticVRPInstruction.creditorAccount) &&
        Objects.equals(this.supplementaryData, obDomesticVRPInstruction.supplementaryData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instructionIdentification, endToEndIdentification, remittanceInformation, localInstrument, instructedAmount, creditorPostalAddress, creditorAccount, supplementaryData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBDomesticVRPInstruction {\n");
    
    sb.append("    instructionIdentification: ").append(toIndentedString(instructionIdentification)).append("\n");
    sb.append("    endToEndIdentification: ").append(toIndentedString(endToEndIdentification)).append("\n");
    sb.append("    remittanceInformation: ").append(toIndentedString(remittanceInformation)).append("\n");
    sb.append("    localInstrument: ").append(toIndentedString(localInstrument)).append("\n");
    sb.append("    instructedAmount: ").append(toIndentedString(instructedAmount)).append("\n");
    sb.append("    creditorPostalAddress: ").append(toIndentedString(creditorPostalAddress)).append("\n");
    sb.append("    creditorAccount: ").append(toIndentedString(creditorAccount)).append("\n");
    sb.append("    supplementaryData: ").append(toIndentedString(supplementaryData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

