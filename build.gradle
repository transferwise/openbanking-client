plugins {
    id 'java-library'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '4.7.1'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id "com.diffplug.spotless" version "5.14.0"
}

ext.projectName = "Openbanking client"
ext.projectDescription = "Java client for using the UK Open Banking API."
ext.projectArtifactName = "openbanking-client"
ext.projectGitHubRepoName = "openbanking-client"
ext.authorName = "Michael Scott"
ext.authorGithub = "mscott-tw"
ext.authorEmail = "michael.scott@transferwise.com"

apply from: 'build.publishing.gradle'

group = 'com.transferwise'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

ext {
    libs = [
        'spring': '5.3.6',
        'jackson': '2.12.3',
        'lombok': '1.18.20',
        'junit': '5.7.1',
        'mockito': '3.9.0'
    ]
}

repositories {
    mavenCentral()
}

dependencies {
    api("org.springframework:spring-web:${libs.spring}")

    implementation('org.apache.httpcomponents:httpclient:4.5.13')

    api("com.fasterxml.jackson.core:jackson-annotations:${libs.jackson}")
    api("com.fasterxml.jackson.core:jackson-databind:${libs.jackson}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${libs.jackson}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${libs.jackson}")

    api('org.bitbucket.b_c:jose4j:0.7.8')

    compileOnly("org.projectlombok:lombok:${libs.lombok}")
    testCompileOnly("org.projectlombok:lombok:${libs.lombok}")
    annotationProcessor("org.projectlombok:lombok:${libs.lombok}")
    testAnnotationProcessor("org.projectlombok:lombok:${libs.lombok}")

    testImplementation("org.junit.jupiter:junit-jupiter:${libs.junit}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${libs.junit}")

    testImplementation("org.mockito:mockito-core:${libs.mockito}")
    testImplementation("org.mockito:mockito-junit-jupiter:${libs.mockito}")

    testImplementation("org.hamcrest:hamcrest:2.2")
    testImplementation("org.skyscreamer:jsonassert:1.5.0")

    testImplementation("org.springframework:spring-test:${libs.spring}")

    testImplementation("org.bouncycastle:bcpkix-jdk15on:1.69")

    testImplementation("ch.qos.logback:logback-classic:1.2.3")

    swaggerCodegen("io.swagger.codegen.v3:swagger-codegen-cli:3.0.26")
}

swaggerSources {
    paymentInitiation {
        inputFile = file('specs/payment-initiation-v3-swagger.yaml')
        code {
            language = 'java'
            components = ['models']
            configFile = file('specs/payment-initiation-v3-generator-config.json')
        }
    }
}

compileJava.dependsOn(generateSwaggerCode)

sourceSets.main.java.srcDir "${swaggerSources.paymentInitiation.code.outputDir}/src/main/java"

spotless {
    java {
        target layout.files("${swaggerSources.paymentInitiation.code.outputDir}/src/main/java")
        replaceRegex 'Remove swagger @ApiModel annotations', '@ApiModel.*$', ''
        replaceRegex 'Remove swagger @ApiModelProperty annotations', '@ApiModelProperty.*$', ''
        replaceRegex 'Remove swagger @Schema annotations', '@Schema.*$', ''
        removeUnusedImports()
    }
}

compileJava.dependsOn(spotlessApply)

jar {
    doFirst {
        manifest {
            attributes("Implementation-Title": project.name, "Implementation-Version": project.version)
        }
    }
}

checkstyle {
    configFile = new File(rootDir, "checkstyle.xml")
    sourceSets = [project.sourceSets.main]
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    // exclude the automatically generated models, we have limited control over how they're generated
    exclude '**/com/transferwise/openbanking/client/api/payment/v3/model/**'
}

spotbugs {
    excludeFilter = file('spotbugs_exclude_filter.xml')
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    incrementalAnalysis = true
    ruleSetFiles = files("custom-pmd-rules.xml")
    ruleSets = []
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    // exclude the automatically generated models, we have limited control over how they're generated
    exclude '**/com/transferwise/openbanking/client/api/payment/v3/model/**'
}

wrapper {
    gradleVersion = '6.8.3'
}

test {
    useJUnitPlatform()
}
